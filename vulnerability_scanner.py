#!/usr/bin/env python3
import nmap
import requests
import socket
import argparse
from urllib.parse import quote
import sys

def scan_ports():
    """Scan for open TCP ports below 9000 on localhost."""
    nm = nmap.PortScanner()
    try:
        nm.scan('127.0.0.1', '1-8999', arguments='-sT -T4')
        return [port for port in nm['127.0.0.1'].all_tcp() 
                if nm['127.0.0.1']['tcp'][port]['state'] == 'open']
    except Exception as e:
        if verbose:
            print(f"Nmap scan error: {e}", file=sys.stderr)
        return []

def try_http_auth(port, username, password):
    """Try HTTP basic authentication on the given port."""
    # Only try HTTP auth on port 8080 by default
    if port != 8080:
        return
        
    try:
        response = requests.get(
            f'http://127.0.0.1:{port}',
            auth=(username, password),
            timeout=2
        )
        if response.status_code == 200:
            print(f"http://{quote(username)}:{quote(password)}@127.0.0.1:{port} {response.text.strip()}")
    except Exception as e:
        if verbose:
            print(f"HTTP error on port {port}: {e}", file=sys.stderr)

def try_ssh_auth(port, username, password):
    """Try SSH authentication on the given port."""
    # Only try SSH auth on port 2222 by default
    if port != 2222:
        return
        
    if verbose:
        print(f"Attempting SSH auth on port {port}", file=sys.stderr)
    
    try:
        import paramiko
        transport = paramiko.Transport(('127.0.0.1', port))
        transport.start_client()
        
        try:
            transport.auth_password(username=username, password=password)
            
            if transport.is_authenticated():
                # Open channel and wait for success message
                channel = transport.open_session()
                response = channel.recv(1024).decode('utf-8')
                
                if 'success' in response.lower():
                    print(f"ssh://{quote(username)}:{quote(password)}@127.0.0.1:{port} success")
                
                channel.close()
                
        except paramiko.AuthenticationException:
            if verbose:
                print(f"Authentication failed for {username}:{password}", file=sys.stderr)
        except (paramiko.SSHException, socket.timeout) as e:
            if verbose:
                print(f"SSH error: {str(e)}", file=sys.stderr)
    except Exception as e:
        if verbose:
            print(f"SSH error on port {port}: {e}", file=sys.stderr)
    finally:
        try:
            transport.close()
        except:
            pass

def main():
    global verbose
    parser = argparse.ArgumentParser(description='Scan for vulnerable services')
    parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose output')
    args = parser.parse_args()
    verbose = args.verbose

    credentials = {
        'admin': 'admin',
        'root': 'abc123',
        'skroob': '12345'
    }

    # Get open ports
    open_ports = scan_ports()
    if verbose:
        print(f"Found open ports: {open_ports}", file=sys.stderr)

    # Try each credential on each port
    for port in open_ports:
        if verbose:
            print(f"Checking port {port}", file=sys.stderr)
        for username, password in credentials.items():
            if verbose:
                print(f"Trying {username}:{password}", file=sys.stderr)
            try_http_auth(port, username, password)
            try_ssh_auth(port, username, password)

if __name__ == '__main__':
    main()
